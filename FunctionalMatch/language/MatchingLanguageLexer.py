# Generated from MatchingLanguage.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,268,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,32,4,32,220,8,32,11,32,12,32,221,1,33,1,33,1,34,1,34,1,34,1,34,
        5,34,230,8,34,10,34,12,34,233,9,34,1,34,1,34,1,35,4,35,238,8,35,
        11,35,12,35,239,1,35,1,35,1,36,1,36,1,36,1,36,5,36,248,8,36,10,36,
        12,36,251,9,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,
        262,8,37,10,37,12,37,265,9,37,1,37,1,37,1,249,0,38,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,1,0,6,2,0,8804,8804,10877,10877,2,0,8805,8805,10878,10878,2,0,
        65,90,97,122,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
        273,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,
        5,81,1,0,0,0,7,83,1,0,0,0,9,90,1,0,0,0,11,98,1,0,0,0,13,103,1,0,
        0,0,15,106,1,0,0,0,17,110,1,0,0,0,19,116,1,0,0,0,21,123,1,0,0,0,
        23,129,1,0,0,0,25,141,1,0,0,0,27,149,1,0,0,0,29,157,1,0,0,0,31,162,
        1,0,0,0,33,172,1,0,0,0,35,175,1,0,0,0,37,178,1,0,0,0,39,180,1,0,
        0,0,41,182,1,0,0,0,43,184,1,0,0,0,45,186,1,0,0,0,47,188,1,0,0,0,
        49,190,1,0,0,0,51,192,1,0,0,0,53,194,1,0,0,0,55,196,1,0,0,0,57,198,
        1,0,0,0,59,200,1,0,0,0,61,202,1,0,0,0,63,211,1,0,0,0,65,219,1,0,
        0,0,67,223,1,0,0,0,69,225,1,0,0,0,71,237,1,0,0,0,73,243,1,0,0,0,
        75,257,1,0,0,0,77,78,5,59,0,0,78,2,1,0,0,0,79,80,5,44,0,0,80,4,1,
        0,0,0,81,82,5,58,0,0,82,6,1,0,0,0,83,84,5,105,0,0,84,85,5,109,0,
        0,85,86,5,112,0,0,86,87,5,111,0,0,87,88,5,114,0,0,88,89,5,116,0,
        0,89,8,1,0,0,0,90,91,5,115,0,0,91,92,5,104,0,0,92,93,5,97,0,0,93,
        94,5,108,0,0,94,95,5,108,0,0,95,96,5,111,0,0,96,97,5,119,0,0,97,
        10,1,0,0,0,98,99,5,100,0,0,99,100,5,101,0,0,100,101,5,101,0,0,101,
        102,5,112,0,0,102,12,1,0,0,0,103,104,5,97,0,0,104,105,5,115,0,0,
        105,14,1,0,0,0,106,107,5,118,0,0,107,108,5,97,0,0,108,109,5,114,
        0,0,109,16,1,0,0,0,110,111,5,109,0,0,111,112,5,97,0,0,112,113,5,
        116,0,0,113,114,5,99,0,0,114,115,5,104,0,0,115,18,1,0,0,0,116,117,
        5,110,0,0,117,118,5,101,0,0,118,119,5,115,0,0,119,120,5,116,0,0,
        120,121,5,101,0,0,121,122,5,100,0,0,122,20,1,0,0,0,123,124,5,119,
        0,0,124,125,5,104,0,0,125,126,5,101,0,0,126,127,5,114,0,0,127,128,
        5,101,0,0,128,22,1,0,0,0,129,130,5,101,0,0,130,131,5,120,0,0,131,
        132,5,116,0,0,132,133,5,101,0,0,133,134,5,110,0,0,134,135,5,100,
        0,0,135,136,5,45,0,0,136,137,5,119,0,0,137,138,5,105,0,0,138,139,
        5,116,0,0,139,140,5,104,0,0,140,24,1,0,0,0,141,142,5,114,0,0,142,
        143,5,101,0,0,143,144,5,112,0,0,144,145,5,108,0,0,145,146,5,97,0,
        0,146,147,5,99,0,0,147,148,5,101,0,0,148,26,1,0,0,0,149,150,5,114,
        0,0,150,151,5,101,0,0,151,152,5,119,0,0,152,153,5,114,0,0,153,154,
        5,105,0,0,154,155,5,116,0,0,155,156,5,101,0,0,156,28,1,0,0,0,157,
        158,5,119,0,0,158,159,5,105,0,0,159,160,5,116,0,0,160,161,5,104,
        0,0,161,30,1,0,0,0,162,163,5,105,0,0,163,164,5,110,0,0,164,165,5,
        45,0,0,165,166,5,109,0,0,166,167,5,111,0,0,167,168,5,100,0,0,168,
        169,5,117,0,0,169,170,5,108,0,0,170,171,5,101,0,0,171,32,1,0,0,0,
        172,173,5,38,0,0,173,174,5,38,0,0,174,34,1,0,0,0,175,176,5,124,0,
        0,176,177,5,124,0,0,177,36,1,0,0,0,178,179,7,0,0,0,179,38,1,0,0,
        0,180,181,7,1,0,0,181,40,1,0,0,0,182,183,5,60,0,0,183,42,1,0,0,0,
        184,185,5,62,0,0,185,44,1,0,0,0,186,187,5,8594,0,0,187,46,1,0,0,
        0,188,189,5,40,0,0,189,48,1,0,0,0,190,191,5,41,0,0,191,50,1,0,0,
        0,192,193,5,8800,0,0,193,52,1,0,0,0,194,195,5,33,0,0,195,54,1,0,
        0,0,196,197,5,61,0,0,197,56,1,0,0,0,198,199,5,8712,0,0,199,58,1,
        0,0,0,200,201,5,8709,0,0,201,60,1,0,0,0,202,203,5,106,0,0,203,204,
        5,115,0,0,204,205,5,111,0,0,205,206,5,110,0,0,206,207,5,112,0,0,
        207,208,5,97,0,0,208,209,5,116,0,0,209,210,5,104,0,0,210,62,1,0,
        0,0,211,212,5,112,0,0,212,213,5,121,0,0,213,214,5,116,0,0,214,215,
        5,104,0,0,215,216,5,111,0,0,216,217,5,110,0,0,217,64,1,0,0,0,218,
        220,7,2,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,
        222,1,0,0,0,222,66,1,0,0,0,223,224,5,95,0,0,224,68,1,0,0,0,225,231,
        5,34,0,0,226,230,8,3,0,0,227,228,5,92,0,0,228,230,7,3,0,0,229,226,
        1,0,0,0,229,227,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,
        1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,34,0,0,235,70,
        1,0,0,0,236,238,7,4,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,
        1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,242,6,35,0,0,242,72,
        1,0,0,0,243,244,5,47,0,0,244,245,5,42,0,0,245,249,1,0,0,0,246,248,
        9,0,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,250,1,0,0,0,249,247,
        1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,253,5,42,0,0,253,254,
        5,47,0,0,254,255,1,0,0,0,255,256,6,36,0,0,256,74,1,0,0,0,257,258,
        5,47,0,0,258,259,5,47,0,0,259,263,1,0,0,0,260,262,8,5,0,0,261,260,
        1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,
        1,0,0,0,265,263,1,0,0,0,266,267,6,37,0,0,267,76,1,0,0,0,7,0,221,
        229,231,239,249,263,1,6,0,0
    ]

class MatchingLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    IMPORT = 4
    SHALLOW = 5
    DEEP = 6
    AS = 7
    VAR = 8
    MATCHING = 9
    NESTED = 10
    WHERE = 11
    EXTEND = 12
    REPLACE = 13
    REWRITE = 14
    WITH = 15
    OVERMODULE = 16
    AND = 17
    OR = 18
    LEQ = 19
    GEQ = 20
    LT = 21
    GT = 22
    IMPL = 23
    LPAR = 24
    RPAR = 25
    NEQ = 26
    NOT = 27
    EQ = 28
    ISIN = 29
    EMPTY = 30
    JSONPATH = 31
    PYTHON = 32
    ALPHANAME = 33
    IGNORE = 34
    STRING = 35
    SPACE = 36
    COMMENT = 37
    LINE_COMMENT = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "':'", "'import'", "'shallow'", "'deep'", "'as'", 
            "'var'", "'match'", "'nested'", "'where'", "'extend-with'", 
            "'replace'", "'rewrite'", "'with'", "'in-module'", "'&&'", "'||'", 
            "'<'", "'>'", "'\\u2192'", "'('", "')'", "'\\u2260'", "'!'", 
            "'='", "'\\u2208'", "'\\u2205'", "'jsonpath'", "'python'", "'_'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "SHALLOW", "DEEP", "AS", "VAR", "MATCHING", "NESTED", 
            "WHERE", "EXTEND", "REPLACE", "REWRITE", "WITH", "OVERMODULE", 
            "AND", "OR", "LEQ", "GEQ", "LT", "GT", "IMPL", "LPAR", "RPAR", 
            "NEQ", "NOT", "EQ", "ISIN", "EMPTY", "JSONPATH", "PYTHON", "ALPHANAME", 
            "IGNORE", "STRING", "SPACE", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "IMPORT", "SHALLOW", "DEEP", "AS", 
                  "VAR", "MATCHING", "NESTED", "WHERE", "EXTEND", "REPLACE", 
                  "REWRITE", "WITH", "OVERMODULE", "AND", "OR", "LEQ", "GEQ", 
                  "LT", "GT", "IMPL", "LPAR", "RPAR", "NEQ", "NOT", "EQ", 
                  "ISIN", "EMPTY", "JSONPATH", "PYTHON", "ALPHANAME", "IGNORE", 
                  "STRING", "SPACE", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "MatchingLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


