# Generated from MatchingLanguage.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,273,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
        29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,33,4,33,225,8,33,11,33,12,33,226,1,
        34,1,34,1,35,1,35,1,35,1,35,5,35,235,8,35,10,35,12,35,238,9,35,1,
        35,1,35,1,36,4,36,243,8,36,11,36,12,36,244,1,36,1,36,1,37,1,37,1,
        37,1,37,5,37,253,8,37,10,37,12,37,256,9,37,1,37,1,37,1,37,1,37,1,
        37,1,38,1,38,1,38,1,38,5,38,267,8,38,10,38,12,38,270,9,38,1,38,1,
        38,1,254,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,1,0,6,2,0,8804,8804,10877,10877,
        2,0,8805,8805,10878,10878,2,0,65,90,97,122,2,0,34,34,92,92,3,0,9,
        10,13,13,32,32,2,0,10,10,13,13,278,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,
        0,0,9,92,1,0,0,0,11,100,1,0,0,0,13,105,1,0,0,0,15,108,1,0,0,0,17,
        111,1,0,0,0,19,115,1,0,0,0,21,121,1,0,0,0,23,128,1,0,0,0,25,134,
        1,0,0,0,27,146,1,0,0,0,29,154,1,0,0,0,31,162,1,0,0,0,33,167,1,0,
        0,0,35,177,1,0,0,0,37,180,1,0,0,0,39,183,1,0,0,0,41,185,1,0,0,0,
        43,187,1,0,0,0,45,189,1,0,0,0,47,191,1,0,0,0,49,193,1,0,0,0,51,195,
        1,0,0,0,53,197,1,0,0,0,55,199,1,0,0,0,57,201,1,0,0,0,59,203,1,0,
        0,0,61,205,1,0,0,0,63,207,1,0,0,0,65,216,1,0,0,0,67,224,1,0,0,0,
        69,228,1,0,0,0,71,230,1,0,0,0,73,242,1,0,0,0,75,248,1,0,0,0,77,262,
        1,0,0,0,79,80,5,59,0,0,80,2,1,0,0,0,81,82,5,44,0,0,82,4,1,0,0,0,
        83,84,5,58,0,0,84,6,1,0,0,0,85,86,5,105,0,0,86,87,5,109,0,0,87,88,
        5,112,0,0,88,89,5,111,0,0,89,90,5,114,0,0,90,91,5,116,0,0,91,8,1,
        0,0,0,92,93,5,115,0,0,93,94,5,104,0,0,94,95,5,97,0,0,95,96,5,108,
        0,0,96,97,5,108,0,0,97,98,5,111,0,0,98,99,5,119,0,0,99,10,1,0,0,
        0,100,101,5,100,0,0,101,102,5,101,0,0,102,103,5,101,0,0,103,104,
        5,112,0,0,104,12,1,0,0,0,105,106,5,97,0,0,106,107,5,115,0,0,107,
        14,1,0,0,0,108,109,5,116,0,0,109,110,5,111,0,0,110,16,1,0,0,0,111,
        112,5,118,0,0,112,113,5,97,0,0,113,114,5,114,0,0,114,18,1,0,0,0,
        115,116,5,109,0,0,116,117,5,97,0,0,117,118,5,116,0,0,118,119,5,99,
        0,0,119,120,5,104,0,0,120,20,1,0,0,0,121,122,5,110,0,0,122,123,5,
        101,0,0,123,124,5,115,0,0,124,125,5,116,0,0,125,126,5,101,0,0,126,
        127,5,100,0,0,127,22,1,0,0,0,128,129,5,119,0,0,129,130,5,104,0,0,
        130,131,5,101,0,0,131,132,5,114,0,0,132,133,5,101,0,0,133,24,1,0,
        0,0,134,135,5,101,0,0,135,136,5,120,0,0,136,137,5,116,0,0,137,138,
        5,101,0,0,138,139,5,110,0,0,139,140,5,100,0,0,140,141,5,45,0,0,141,
        142,5,119,0,0,142,143,5,105,0,0,143,144,5,116,0,0,144,145,5,104,
        0,0,145,26,1,0,0,0,146,147,5,114,0,0,147,148,5,101,0,0,148,149,5,
        112,0,0,149,150,5,108,0,0,150,151,5,97,0,0,151,152,5,99,0,0,152,
        153,5,101,0,0,153,28,1,0,0,0,154,155,5,114,0,0,155,156,5,101,0,0,
        156,157,5,119,0,0,157,158,5,114,0,0,158,159,5,105,0,0,159,160,5,
        116,0,0,160,161,5,101,0,0,161,30,1,0,0,0,162,163,5,119,0,0,163,164,
        5,105,0,0,164,165,5,116,0,0,165,166,5,104,0,0,166,32,1,0,0,0,167,
        168,5,105,0,0,168,169,5,110,0,0,169,170,5,45,0,0,170,171,5,109,0,
        0,171,172,5,111,0,0,172,173,5,100,0,0,173,174,5,117,0,0,174,175,
        5,108,0,0,175,176,5,101,0,0,176,34,1,0,0,0,177,178,5,38,0,0,178,
        179,5,38,0,0,179,36,1,0,0,0,180,181,5,124,0,0,181,182,5,124,0,0,
        182,38,1,0,0,0,183,184,7,0,0,0,184,40,1,0,0,0,185,186,7,1,0,0,186,
        42,1,0,0,0,187,188,5,60,0,0,188,44,1,0,0,0,189,190,5,62,0,0,190,
        46,1,0,0,0,191,192,5,8594,0,0,192,48,1,0,0,0,193,194,5,40,0,0,194,
        50,1,0,0,0,195,196,5,41,0,0,196,52,1,0,0,0,197,198,5,8800,0,0,198,
        54,1,0,0,0,199,200,5,33,0,0,200,56,1,0,0,0,201,202,5,61,0,0,202,
        58,1,0,0,0,203,204,5,8712,0,0,204,60,1,0,0,0,205,206,5,8709,0,0,
        206,62,1,0,0,0,207,208,5,106,0,0,208,209,5,115,0,0,209,210,5,111,
        0,0,210,211,5,110,0,0,211,212,5,112,0,0,212,213,5,97,0,0,213,214,
        5,116,0,0,214,215,5,104,0,0,215,64,1,0,0,0,216,217,5,112,0,0,217,
        218,5,121,0,0,218,219,5,116,0,0,219,220,5,104,0,0,220,221,5,111,
        0,0,221,222,5,110,0,0,222,66,1,0,0,0,223,225,7,2,0,0,224,223,1,0,
        0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,68,1,0,0,
        0,228,229,5,95,0,0,229,70,1,0,0,0,230,236,5,34,0,0,231,235,8,3,0,
        0,232,233,5,92,0,0,233,235,7,3,0,0,234,231,1,0,0,0,234,232,1,0,0,
        0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,
        0,238,236,1,0,0,0,239,240,5,34,0,0,240,72,1,0,0,0,241,243,7,4,0,
        0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,
        0,245,246,1,0,0,0,246,247,6,36,0,0,247,74,1,0,0,0,248,249,5,47,0,
        0,249,250,5,42,0,0,250,254,1,0,0,0,251,253,9,0,0,0,252,251,1,0,0,
        0,253,256,1,0,0,0,254,255,1,0,0,0,254,252,1,0,0,0,255,257,1,0,0,
        0,256,254,1,0,0,0,257,258,5,42,0,0,258,259,5,47,0,0,259,260,1,0,
        0,0,260,261,6,37,0,0,261,76,1,0,0,0,262,263,5,47,0,0,263,264,5,47,
        0,0,264,268,1,0,0,0,265,267,8,5,0,0,266,265,1,0,0,0,267,270,1,0,
        0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,
        0,0,271,272,6,38,0,0,272,78,1,0,0,0,7,0,226,234,236,244,254,268,
        1,6,0,0
    ]

class MatchingLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    IMPORT = 4
    SHALLOW = 5
    DEEP = 6
    AS = 7
    TO = 8
    VAR = 9
    MATCHING = 10
    NESTED = 11
    WHERE = 12
    EXTEND = 13
    REPLACE = 14
    REWRITE = 15
    WITH = 16
    OVERMODULE = 17
    AND = 18
    OR = 19
    LEQ = 20
    GEQ = 21
    LT = 22
    GT = 23
    IMPL = 24
    LPAR = 25
    RPAR = 26
    NEQ = 27
    NOT = 28
    EQ = 29
    ISIN = 30
    EMPTY = 31
    JSONPATH = 32
    PYTHON = 33
    ALPHANAME = 34
    IGNORE = 35
    STRING = 36
    SPACE = 37
    COMMENT = 38
    LINE_COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "':'", "'import'", "'shallow'", "'deep'", "'as'", 
            "'to'", "'var'", "'match'", "'nested'", "'where'", "'extend-with'", 
            "'replace'", "'rewrite'", "'with'", "'in-module'", "'&&'", "'||'", 
            "'<'", "'>'", "'\\u2192'", "'('", "')'", "'\\u2260'", "'!'", 
            "'='", "'\\u2208'", "'\\u2205'", "'jsonpath'", "'python'", "'_'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "SHALLOW", "DEEP", "AS", "TO", "VAR", "MATCHING", 
            "NESTED", "WHERE", "EXTEND", "REPLACE", "REWRITE", "WITH", "OVERMODULE", 
            "AND", "OR", "LEQ", "GEQ", "LT", "GT", "IMPL", "LPAR", "RPAR", 
            "NEQ", "NOT", "EQ", "ISIN", "EMPTY", "JSONPATH", "PYTHON", "ALPHANAME", 
            "IGNORE", "STRING", "SPACE", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "IMPORT", "SHALLOW", "DEEP", "AS", 
                  "TO", "VAR", "MATCHING", "NESTED", "WHERE", "EXTEND", 
                  "REPLACE", "REWRITE", "WITH", "OVERMODULE", "AND", "OR", 
                  "LEQ", "GEQ", "LT", "GT", "IMPL", "LPAR", "RPAR", "NEQ", 
                  "NOT", "EQ", "ISIN", "EMPTY", "JSONPATH", "PYTHON", "ALPHANAME", 
                  "IGNORE", "STRING", "SPACE", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "MatchingLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


