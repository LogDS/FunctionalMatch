import FBinaryPredicate                       in-module "FunctionalMatch.example.parmenides.Formulae"
import FUnaryPredicate                        in-module "FunctionalMatch.example.parmenides.Formulae"
import FNot                                   in-module "FunctionalMatch.example.parmenides.Formulae"
import FVariable                              in-module "FunctionalMatch.example.parmenides.Formulae"
import "nonEmptyMatch"                        in-module "FunctionalMatch.example.parmenides.queries"
import "getMultiwayAdjectivalPoint"           in-module "FunctionalMatch.example.parmenides.queries"
import "getMultiwayTargetSimpleSentence"      in-module "FunctionalMatch.example.parmenides.queries"
import "isOfType"                             in-module "FunctionalMatch.example.parmenides.queries"
import "addProperty"                          in-module "FunctionalMatch.example.parmenides.queries"
import "getOutgoingNodes"                     in-module "FunctionalMatch.example.parmenides.queries"
import "extractProperties"                    in-module "FunctionalMatch.example.parmenides.queries"
import "extractJsonPath"                      in-module "FunctionalMatch.example.parmenides.queries"
import "removeFromProperties"                 in-module "FunctionalMatch.example.parmenides.queries"
import "addAdjective"                         in-module "FunctionalMatch.example.parmenides.queries"
import "addSpecification"                     in-module "FunctionalMatch.example.parmenides.queries"
import "getIngoingNodes"                      in-module "FunctionalMatch.example.parmenides.queries"

// query #7: If x exists with y and y is opposite to z, then x does not exists with z
nested match        FUnaryPredicate ( "be",  var(arg) , var(score), var(props)  )
       replace var(x) with    jsonpath "$0:$.arg.cop.name",
               var(orig) with jsonpath "$0:$"
       extend-with  "getOutgoingNodes" with variable : "x"   result : "z"   rel : "neqTo"
       where call "nonEmptyMatch" with variable : "x"
       as deep rewrite jsonpath "orig:$.arg.cop.name" to var(z),
                       jsonpath "$0:$"             to FNot ( var(orig) )
       ;