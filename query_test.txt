import FBinaryPredicate                       in-module "FunctionalMatch.example.parmenides.Formulae"
import FUnaryPredicate                        in-module "FunctionalMatch.example.parmenides.Formulae"
import FNot                                   in-module "FunctionalMatch.example.parmenides.Formulae"
import FVariable                              in-module "FunctionalMatch.example.parmenides.Formulae"
import "nonEmptyMatch"                        in-module "FunctionalMatch.example.parmenides.queries"
import "getMultiwayAdjectivalPoint"           in-module "FunctionalMatch.example.parmenides.queries"
import "getMultiwayTargetSimpleSentence"      in-module "FunctionalMatch.example.parmenides.queries"
import "isOfType"                             in-module "FunctionalMatch.example.parmenides.queries"
import "addProperty"                          in-module "FunctionalMatch.example.parmenides.queries"
import "getOutgoingNodes"                     in-module "FunctionalMatch.example.parmenides.queries"
import "extractProperties"                    in-module "FunctionalMatch.example.parmenides.queries"
import "extractJsonPath"                      in-module "FunctionalMatch.example.parmenides.queries"
import "removeFromProperties"                 in-module "FunctionalMatch.example.parmenides.queries"
import "addAdjective"                         in-module "FunctionalMatch.example.parmenides.queries"
import "addSpecification"                     in-module "FunctionalMatch.example.parmenides.queries"
import "getIngoingNodes"                      in-module "FunctionalMatch.example.parmenides.queries"
import "dropCopula"                           in-module "FunctionalMatch.example.parmenides.queries"

// query 24: Extracting be from have target
nested match FBinaryPredicate ( _, _, var(dst), var(score), var(props) )
       as (  FUnaryPredicate ( "be",  var(dst) , var(score), ( "removeFromProperties" ( var(props) ) with key : "AIM_OBJECTIVE" ) ) )
;


// query 25: Extracting be from have target
nested match FBinaryPredicate ( _, var(src), _, var(score), var(props) )
       as (  FUnaryPredicate ( "be",  var(src) , var(score), ( "removeFromProperties" ( var(props) ) with key : "AIM_OBJECTIVE" )  ) )
;

nested match   FUnaryPredicate ( "be", var(src), var(score), var(props) )
       replace var(x) with  jsonpath "$0:$.arg.name",
               var(cop) with jsonpath "$0:$.arg.cop"
       where (call "nonEmptyMatch" with variable : "cop") && (call "nonEmptyMatch" with variable : "x") && ((call "isOfType" with variable : "x" type : "LOC") || (call "isOfType" with variable : "x" type : "GPE"))
       as deep rewrite var(src) to "dropCopula" ( var(src) ) ,
                       jsonpath "$0:$" to  FUnaryPredicate ( "be" ,  var(cop) , var(score), ( "addProperty" ( var(props) ) with key : "SPACE" value :  var(src) ) )
       ;